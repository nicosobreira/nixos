#!/usr/bin/env bash

set -eou pipefail

# Global variables

SESSION_PATH=""
SESSION_NAME=""
SEARCH_FOLDERS="$HOME/Code"

# Functions

create_session_windows()
{
  local session_name session_path
  session_name="$1"
  session_path="$2"

  tmux new-window -c "$session_path" -t "$session_name:1" -d -n "code" "$EDITOR" &>/dev/null || tmux rename-window -t "$session_name:1" "code"
  tmux new-window -c "$session_path" -t "$session_name:2" -d -n "run" &>/dev/null || tmux rename-window -t "$session_name:2" "run"
}

get_session_name()
{
  local session_path
  session_path="$1"

  basename "$session_path" | tr . _
}

# If session_path is valid return 0 (TRUE), else return 1 (FALSE) and echo error message to stderr
validate_session_path()
{
  local session_path
  session_path="$1"

  if [[ -d "$session_path" ]]; then
    return 0
  fi

  session_name="$(get_session_name "$session_path")"

  if tmux has-session -t "$session_name" 2>/dev/null; then
    return 0
  fi

  echo "The directory \"$session_path\" or session \"$session_name\" does not exist" >&2
  return 1
}

get_session_fzf()
{
  local selection

  selection=$(
    {
      echo "--- Tmux Sessions ---"
      tmux list-sessions -F "#{session_name}" 2>/dev/null
      echo "--- Project Directories ---"
      find "$SEARCH_FOLDERS" -mindepth 1 -maxdepth 2 -type d 2>/dev/null
    } | fzf --prompt="Select a directory or session: " --header-first --layout "reverse"
  )

  if [[ -z ${selection+x} ]]; then
    return 1
  fi

  if [[ "$selection" == ---* ]]; then
    return 1
  fi

  if ! validate_session_path "$selection"; then
    return 1
  fi

  echo "$selection"
}

# BUG: The input_work_folder don't handle a session name with "." in it, because it will substitute to "_"
input_work_folder()
{
  local input_path session_path
  while :
  do
    read -e -p "Enter a directory/session: [None to fzf] " input_path

    if [[ -z $input_path ]]; then
      session_path="$(get_session_fzf)"
      break
    fi

    session_path="${input_path/#\~/"$HOME"}"

    if validate_session_path "$session_path"; then
      break
    fi

    echo "Please try again" >&2
  done

  echo "$session_path"
}

if [[ $# -eq 0 ]]; then
  SESSION_PATH="$(get_session_fzf)"
elif [[ $# -eq 1 ]]; then
  if [[ $1 == -p ]]; then
    SESSION_PATH="$(input_work_folder)"
  else
    if ! validate_session_path "$1"; then
      exit 2
    fi

    SESSION_PATH="$1"
  fi
else
  echo "ERROR: More than 2 arguments" >2&
  exit 1
fi

SESSION_NAME="$(get_session_name "$SESSION_PATH")"

if pgrep tmux &>/dev/null; then
  TMUX_RUNNING="$(pgrep tmux || true)"
else
  TMUX_RUNNING=""
fi

if [[ -z ${TMUX+x} ]] && [[ -z ${TMUX_RUNNING+x} ]]; then
  tmux new-session -s "$SESSION_NAME" -c "$SESSION_PATH"
  create_session_windows "$SESSION_NAME" "$SESSION_PATH"
  exit 0
fi

if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
  tmux new-session -d -s "$SESSION_NAME" -c "$SESSION_PATH"
  create_session_windows "$SESSION_NAME" "$SESSION_PATH"
fi

if [[ -z ${TMUX+x} ]]; then
  tmux attach-session -t "$SESSION_NAME"
else
  tmux switch-client -t "$SESSION_NAME"
fi
